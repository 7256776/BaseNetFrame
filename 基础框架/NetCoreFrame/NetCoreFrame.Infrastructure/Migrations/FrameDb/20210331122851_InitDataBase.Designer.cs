// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCoreFrame.Infrastructure;

namespace NetCoreFrame.Infrastructure.Migrations.FrameDb
{
    [DbContext(typeof(FrameDbContext))]
    [Migration("20210331122851_InitDataBase")]
    partial class InitDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Data")
                        .HasColumnName("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnName("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnName("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnName("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnName("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasColumnName("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnName("NotificationName")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnName("Severity");

                    b.Property<string>("TenantIds")
                        .HasColumnName("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasColumnName("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationsSend");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasColumnName("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnName("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnName("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasColumnName("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId")
                        .HasColumnName("TenantId");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9aed633-e9ae-40e6-8ad4-4eec083b03b0"),
                            CreationTime = new DateTime(2021, 3, 31, 20, 28, 51, 89, DateTimeKind.Local).AddTicks(5728),
                            NotificationName = "system",
                            TenantId = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = new Guid("15812862-b2d7-45e2-826e-25545057c334"),
                            CreationTime = new DateTime(2021, 3, 31, 20, 28, 51, 89, DateTimeKind.Local).AddTicks(6894),
                            NotificationName = "system",
                            TenantId = 1,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Data")
                        .HasColumnName("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnName("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnName("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnName("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnName("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnName("NotificationName")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnName("Severity");

                    b.Property<int?>("TenantId")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationsToTenant");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<int>("State")
                        .HasColumnName("State");

                    b.Property<int?>("TenantId")
                        .HasColumnName("TenantId");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnName("TenantNotificationId");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationsToUser");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysApiAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("ExtensionData")
                        .HasColumnName("ExtensionData");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sys_ApiAccount");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysApiClienToAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AccountSource")
                        .HasColumnName("AccountSource")
                        .HasMaxLength(10);

                    b.Property<Guid>("ApiAccountId")
                        .HasColumnName("ApiAccountId");

                    b.Property<Guid>("ApiClientId")
                        .HasColumnName("ApiClientId");

                    b.HasKey("Id");

                    b.ToTable("Sys_ApiClientoaccount");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysApiClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccessTokenLifetime")
                        .IsRequired()
                        .HasColumnName("AccessTokenLifetime");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnName("AllowOfflineAccess");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("ClientId")
                        .HasMaxLength(100);

                    b.Property<string>("ClientSecrets")
                        .IsRequired()
                        .HasColumnName("ClientSecrets")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("ExtensionData")
                        .HasColumnName("ExtensionData");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<int?>("SlidingRefreshTokenLifetime")
                        .HasColumnName("SlidingRefreshTokenLifetime");

                    b.HasKey("Id");

                    b.ToTable("Sys_ApiClient");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("ExtensionData")
                        .HasColumnName("ExtensionData");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<string>("ResourceDisplayName")
                        .IsRequired()
                        .HasColumnName("ResourceDisplayName")
                        .HasMaxLength(100);

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnName("ResourceName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sys_ApiResource");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysApiResourceToClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("ApiClientId")
                        .HasColumnName("ApiClientId");

                    b.Property<Guid>("ApiResourceId")
                        .HasColumnName("ApiResourceId");

                    b.HasKey("Id");

                    b.ToTable("Sys_ApiResourceToClient");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysAuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnName("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnName("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnName("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasColumnName("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasColumnName("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration")
                        .HasColumnName("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnName("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnName("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnName("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasColumnName("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasColumnName("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasColumnName("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_AuditLog");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysChatRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ChatDetailed")
                        .HasColumnName("ChatDetailed")
                        .HasMaxLength(1000);

                    b.Property<int>("ChatState")
                        .HasColumnName("ChatState");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<long>("ReceiveUserId")
                        .HasColumnName("ReceiveUserId");

                    b.Property<int>("SendOrReceive")
                        .HasColumnName("SendOrReceive");

                    b.Property<long>("SenderUserId")
                        .HasColumnName("SenderUserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_ChatRecord");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysDict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("DictCode")
                        .IsRequired()
                        .HasColumnName("DictCode")
                        .HasMaxLength(50);

                    b.Property<string>("DictContent")
                        .IsRequired()
                        .HasColumnName("DictContent")
                        .HasMaxLength(50);

                    b.Property<string>("DictType")
                        .IsRequired()
                        .HasColumnName("DictType")
                        .HasMaxLength(50);

                    b.Property<string>("DictValue")
                        .HasColumnName("DictValue")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnName("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Sys_Dict");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2804a8d-7e91-48ab-800f-811e7288ebea"),
                            DictCode = "1",
                            DictContent = "公司",
                            DictType = "JGLX",
                            DictValue = "",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("037cccbb-004a-4395-af3d-7d3a097fc097"),
                            DictCode = "2",
                            DictContent = "部门",
                            DictType = "JGLX",
                            DictValue = "",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysDictType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("DictType")
                        .IsRequired()
                        .HasColumnName("DictType")
                        .HasMaxLength(50);

                    b.Property<string>("DictTypeName")
                        .IsRequired()
                        .HasColumnName("DictTypeName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Sys_DictType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b52b584d-d840-451c-a8e6-c61089c3d6d5"),
                            DictType = "JGLX",
                            DictTypeName = "机构类型",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysMenuAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionDisplayName")
                        .HasColumnName("ActionDisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("ActionName")
                        .HasColumnName("ActionName")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(2000);

                    b.Property<bool?>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<long>("MenuID")
                        .HasColumnName("MenuID");

                    b.Property<string>("PermissionName")
                        .HasColumnName("PermissionName")
                        .HasMaxLength(100);

                    b.Property<string>("RequiresAuthModel")
                        .HasColumnName("RequiresAuthModel")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("MenuID");

                    b.ToTable("Sys_MenuAction");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActionDisplayName = "新增",
                            ActionName = "btnAdd",
                            IsActive = true,
                            MenuID = 2L,
                            PermissionName = "",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 2L,
                            ActionDisplayName = "保存",
                            ActionName = "btnSave",
                            IsActive = true,
                            MenuID = 2L,
                            PermissionName = "MenusManager.SaveMenus",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 3L,
                            ActionDisplayName = "删除",
                            ActionName = "btnDel",
                            IsActive = true,
                            MenuID = 2L,
                            PermissionName = "MenusManager.DelMenus",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 4L,
                            ActionDisplayName = "新增",
                            ActionName = "btnAdd",
                            IsActive = true,
                            MenuID = 3L,
                            PermissionName = "UserInfoManager.SaveUser",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 5L,
                            ActionDisplayName = "编辑",
                            ActionName = "btnEdit",
                            IsActive = true,
                            MenuID = 3L,
                            PermissionName = "UserInfoManager.SaveUser",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 6L,
                            ActionDisplayName = "删除",
                            ActionName = "btnDel",
                            IsActive = true,
                            MenuID = 3L,
                            PermissionName = "UserInfoManager.DelUser",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 7L,
                            ActionDisplayName = "重置密码",
                            ActionName = "btnResetPass",
                            IsActive = true,
                            MenuID = 3L,
                            PermissionName = "UserInfoManager.ResetPass",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 8L,
                            ActionDisplayName = "新增",
                            ActionName = "btnAdd",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.SaveRole",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 9L,
                            ActionDisplayName = "编辑",
                            ActionName = "BtnEdit",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.SaveRole",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 10L,
                            ActionDisplayName = "删除",
                            ActionName = "btnDel",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.DelRole",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 11L,
                            ActionDisplayName = "模块授权",
                            ActionName = "btnMenu",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.SaveRoleToMenu",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 12L,
                            ActionDisplayName = "用户授权",
                            ActionName = "btnUser",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.SaveRoleToUser",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 13L,
                            ActionDisplayName = "新增",
                            ActionName = "btnAdd",
                            IsActive = true,
                            MenuID = 7L,
                            PermissionName = "",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 14L,
                            ActionDisplayName = "保存",
                            ActionName = "btnSave",
                            IsActive = true,
                            MenuID = 7L,
                            PermissionName = "OrgManager.SaveSysOrg",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 15L,
                            ActionDisplayName = "删除",
                            ActionName = "btnDel",
                            IsActive = true,
                            MenuID = 7L,
                            PermissionName = "OrgManager.DelSysOrg",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 16L,
                            ActionDisplayName = "新增类型",
                            ActionName = "btnAddType",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 17L,
                            ActionDisplayName = "删除类型",
                            ActionName = "btnDelType",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "DictManager.DelDictType",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 18L,
                            ActionDisplayName = "保存字典类型",
                            ActionName = "btnSave",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "DictManager.SaveDictType",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 19L,
                            ActionDisplayName = "新增字典编码",
                            ActionName = "btnAddCode",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 20L,
                            ActionDisplayName = "删除字典编码",
                            ActionName = "btnDelCode",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "DictManager.DelDict",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 21L,
                            ActionDisplayName = "保存字典编码",
                            ActionName = "btnSaveDict",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "DictManager.SaveDict",
                            RequiresAuthModel = "3"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysMenus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessType")
                        .HasColumnName("BusinessType")
                        .HasMaxLength(20);

                    b.Property<string>("CustomData")
                        .HasColumnName("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("Icon")
                        .HasColumnName("Icon")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("MenuDisplayName")
                        .HasColumnName("MenuDisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("MenuName")
                        .HasColumnName("MenuName")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderBy")
                        .HasColumnName("OrderBy");

                    b.Property<long?>("ParentID")
                        .HasColumnName("ParentID");

                    b.Property<string>("PermissionName")
                        .HasColumnName("PermissionName")
                        .HasMaxLength(100);

                    b.Property<string>("RequiresAuthModel")
                        .HasColumnName("RequiresAuthModel")
                        .HasMaxLength(10);

                    b.Property<string>("Url")
                        .HasColumnName("Url")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sys_Menus");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BusinessType = "1",
                            Icon = "fa-list-ol",
                            IsActive = true,
                            MenuDisplayName = "系统设置",
                            MenuName = "sys-config",
                            OrderBy = 1,
                            PermissionName = "",
                            RequiresAuthModel = "3",
                            Url = ""
                        },
                        new
                        {
                            Id = 2L,
                            BusinessType = "1",
                            Icon = "fa-list-ol",
                            IsActive = true,
                            MenuDisplayName = "菜单管理",
                            MenuName = "sys-menus",
                            OrderBy = 1,
                            ParentID = 1L,
                            PermissionName = "MenusManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysMenus/Index"
                        },
                        new
                        {
                            Id = 3L,
                            BusinessType = "1",
                            Icon = "fa-users",
                            IsActive = true,
                            MenuDisplayName = "用户管理",
                            MenuName = "sys-account",
                            OrderBy = 2,
                            ParentID = 1L,
                            PermissionName = "UserInfoManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysAccount/index"
                        },
                        new
                        {
                            Id = 4L,
                            BusinessType = "1",
                            Icon = "fa-vcard",
                            IsActive = true,
                            MenuDisplayName = "角色管理",
                            MenuName = "sys-roles",
                            OrderBy = 3,
                            ParentID = 1L,
                            PermissionName = "RoleManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysRole/Index"
                        },
                        new
                        {
                            Id = 5L,
                            BusinessType = "1",
                            Icon = "fa-bullhorn",
                            IsActive = true,
                            MenuDisplayName = "消息通知",
                            MenuName = "sys-notifications",
                            OrderBy = 5,
                            ParentID = 1L,
                            PermissionName = "NotificationsManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysNotifications/Index"
                        },
                        new
                        {
                            Id = 6L,
                            BusinessType = "1",
                            Icon = "fa-book",
                            IsActive = true,
                            MenuDisplayName = "日志管理",
                            MenuName = "sys-auditlogs",
                            OrderBy = 7,
                            ParentID = 1L,
                            PermissionName = "LogManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysAuditLogs/Index"
                        },
                        new
                        {
                            Id = 7L,
                            BusinessType = "1",
                            Icon = "fa-university",
                            IsActive = true,
                            MenuDisplayName = "组织机构",
                            MenuName = "sys-org",
                            OrderBy = 6,
                            ParentID = 1L,
                            PermissionName = "OrgManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysOrg/Index"
                        },
                        new
                        {
                            Id = 8L,
                            BusinessType = "1",
                            Icon = "fa-bookmark",
                            IsActive = true,
                            MenuDisplayName = "字典管理",
                            MenuName = "sys-dict",
                            OrderBy = 7,
                            ParentID = 1L,
                            PermissionName = "DictManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysDict/Index"
                        },
                        new
                        {
                            Id = 9L,
                            BusinessType = "1",
                            Icon = "fa-windows",
                            IsActive = true,
                            MenuDisplayName = "OIDC授权",
                            MenuName = "sys-authorization",
                            OrderBy = 9,
                            ParentID = 1L,
                            PermissionName = "AuthorizationManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysAuthorization/Index"
                        },
                        new
                        {
                            Id = 10L,
                            BusinessType = "1",
                            Icon = "fa-windows",
                            IsActive = true,
                            MenuDisplayName = "流程管理",
                            MenuName = "sys-flow",
                            OrderBy = 10,
                            ParentID = 1L,
                            PermissionName = "Flow",
                            RequiresAuthModel = "2",
                            Url = "/"
                        },
                        new
                        {
                            Id = 11L,
                            BusinessType = "1",
                            Icon = "fa-windows",
                            IsActive = true,
                            MenuDisplayName = "流程基础数据",
                            MenuName = "sys-flowconfig",
                            OrderBy = 1,
                            ParentID = 10L,
                            PermissionName = "FlowConfig",
                            RequiresAuthModel = "2",
                            Url = "/Views/SysFlowDesigner/FlowConfig"
                        },
                        new
                        {
                            Id = 12L,
                            BusinessType = "1",
                            Icon = "fa-windows",
                            IsActive = true,
                            MenuDisplayName = "流程设计器",
                            MenuName = "sys-flowdesigner",
                            OrderBy = 2,
                            ParentID = 10L,
                            PermissionName = "FlowDesigner",
                            RequiresAuthModel = "2",
                            Url = "/Views/SysFlowDesigner/Index"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("NotificationDescribe")
                        .HasColumnName("NotificationDescribe")
                        .HasMaxLength(200);

                    b.Property<string>("NotificationDisplayName")
                        .HasColumnName("NotificationDisplayName")
                        .HasMaxLength(100);

                    b.Property<string>("NotificationName")
                        .HasColumnName("NotificationName")
                        .HasMaxLength(100);

                    b.Property<string>("NotificationType")
                        .HasColumnName("NotificationType")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0bfb0ddd-bb12-4059-87a1-4e0294643ea4"),
                            CreationTime = new DateTime(2021, 3, 31, 20, 28, 51, 89, DateTimeKind.Local).AddTicks(1800),
                            NotificationDescribe = "提供系统默认提示消息",
                            NotificationDisplayName = "系统通知",
                            NotificationName = "system",
                            NotificationType = "sms"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysOrg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<int?>("OrderBy")
                        .HasColumnName("OrderBy");

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasColumnName("OrgCode")
                        .HasMaxLength(100);

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasColumnName("OrgName")
                        .HasMaxLength(100);

                    b.Property<string>("OrgNode")
                        .IsRequired()
                        .HasColumnName("OrgNode")
                        .HasMaxLength(1000);

                    b.Property<string>("OrgType")
                        .IsRequired()
                        .HasColumnName("OrgType")
                        .HasMaxLength(20);

                    b.Property<Guid?>("ParentOrgID")
                        .HasColumnName("ParentOrgID");

                    b.HasKey("Id");

                    b.ToTable("Sys_Org");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysRoleToMenuAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMenu")
                        .HasColumnName("IsMenu");

                    b.Property<long?>("MenuActionID")
                        .HasColumnName("MenuActionID");

                    b.Property<long>("MenuID")
                        .HasColumnName("MenuID");

                    b.Property<long>("RoleID")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.ToTable("Sys_RoleToMenuAction");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsMenu = true,
                            MenuID = 1L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsMenu = true,
                            MenuID = 2L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 3L,
                            IsMenu = true,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 4L,
                            IsMenu = true,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsMenu = true,
                            MenuID = 5L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsMenu = true,
                            MenuID = 6L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 7L,
                            IsMenu = true,
                            MenuID = 7L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 8L,
                            IsMenu = true,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 9L,
                            IsMenu = false,
                            MenuActionID = 1L,
                            MenuID = 2L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 10L,
                            IsMenu = false,
                            MenuActionID = 2L,
                            MenuID = 2L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsMenu = false,
                            MenuActionID = 3L,
                            MenuID = 2L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsMenu = false,
                            MenuActionID = 4L,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 13L,
                            IsMenu = false,
                            MenuActionID = 5L,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 14L,
                            IsMenu = false,
                            MenuActionID = 6L,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 15L,
                            IsMenu = false,
                            MenuActionID = 7L,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 16L,
                            IsMenu = false,
                            MenuActionID = 8L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 17L,
                            IsMenu = false,
                            MenuActionID = 9L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 18L,
                            IsMenu = false,
                            MenuActionID = 10L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 19L,
                            IsMenu = false,
                            MenuActionID = 11L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 20L,
                            IsMenu = false,
                            MenuActionID = 12L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 21L,
                            IsMenu = false,
                            MenuActionID = 13L,
                            MenuID = 7L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 22L,
                            IsMenu = false,
                            MenuActionID = 14L,
                            MenuID = 7L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 23L,
                            IsMenu = false,
                            MenuActionID = 15L,
                            MenuID = 7L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 24L,
                            IsMenu = false,
                            MenuActionID = 16L,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 25L,
                            IsMenu = false,
                            MenuActionID = 17L,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 26L,
                            IsMenu = false,
                            MenuActionID = 18L,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 27L,
                            IsMenu = false,
                            MenuActionID = 19L,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 28L,
                            IsMenu = false,
                            MenuActionID = 20L,
                            MenuID = 8L,
                            RoleID = 1L
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysRoleToUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleID")
                        .HasColumnName("RoleID");

                    b.Property<long>("UserID")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("Sys_RoleToUser");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleID = 1L,
                            UserID = 2L
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(2000);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("RoleName")
                        .HasMaxLength(50);

                    b.Property<long?>("TenantId")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Sys_Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2021, 3, 31, 20, 28, 51, 80, DateTimeKind.Local).AddTicks(8469),
                            Description = "动态生成的角色",
                            IsActive = true,
                            RoleName = "admin角色"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UserId")
                        .HasColumnName("UserId");

                    b.Property<string>("Value")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Sys_Setting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecf6faa6-27d6-4056-bb32-91357b639824"),
                            CreationTime = new DateTime(2021, 3, 31, 20, 28, 51, 89, DateTimeKind.Local).AddTicks(9305),
                            Name = "Abp.Localization.DefaultLanguageName",
                            Value = "zh-Hans"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.UserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<string>("ImageUrl")
                        .HasColumnName("ImageUrl")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("IsAdmin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnName("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<string>("OrgCode")
                        .HasColumnName("OrgCode")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Sex")
                        .HasColumnName("Sex")
                        .HasMaxLength(20);

                    b.Property<long?>("TenantId")
                        .HasColumnName("TenantId");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnName("UserCode")
                        .HasMaxLength(100);

                    b.Property<string>("UserNameCn")
                        .IsRequired()
                        .HasColumnName("UserNameCn")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sys_UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2021, 3, 31, 20, 28, 51, 81, DateTimeKind.Local).AddTicks(4560),
                            ImageUrl = "m",
                            IsActive = true,
                            IsAdmin = true,
                            IsDeleted = false,
                            Password = "AQAAAAEAACcQAAAAEL4Jvdbmz2uKeI7blzH90zphO6Ej86+WwhTSgUTh5XCf3Uv5FetLJBl+qNcLOgEVAw==",
                            Sex = "1",
                            UserCode = "sys",
                            UserNameCn = "管理员"
                        },
                        new
                        {
                            Id = 2L,
                            CreationTime = new DateTime(2021, 3, 31, 20, 28, 51, 87, DateTimeKind.Local).AddTicks(208),
                            ImageUrl = "2",
                            IsActive = true,
                            IsAdmin = false,
                            IsDeleted = false,
                            Password = "AQAAAAEAACcQAAAAEAvAFT2taVzbRxD/Nv0A8T1xtWThUKXhlnulkg8IWPuUvg5q3SR/HZQuktKqec0yvA==",
                            Sex = "0",
                            UserCode = "admin",
                            UserNameCn = "管理员"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysMenuAction", b =>
                {
                    b.HasOne("NetCoreFrame.Core.SysMenus")
                        .WithMany("SysMenuActions")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysRoleToUser", b =>
                {
                    b.HasOne("NetCoreFrame.Core.SysRoles")
                        .WithMany("SysRoleToUserList")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetCoreFrame.Core.UserInfo")
                        .WithMany("SysRoleToUserList")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
