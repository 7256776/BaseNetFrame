// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCoreFrame.Infrastructure;

namespace NetCoreFrame.Infrastructure.Migrations
{
    [DbContext(typeof(InfrastructureDbContext))]
    [Migration("20200115075521_InitDataBase")]
    partial class InitDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Data")
                        .HasColumnName("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnName("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnName("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnName("EntityTypeAssemblyName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnName("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasColumnName("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnName("NotificationName")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnName("Severity");

                    b.Property<string>("TenantIds")
                        .HasColumnName("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasColumnName("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationsSend");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasColumnName("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnName("EntityTypeAssemblyName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnName("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasColumnName("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId")
                        .HasColumnName("TenantId");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9aed633-e9ae-40e6-8ad4-4eec083b03b0"),
                            CreationTime = new DateTime(2020, 1, 15, 15, 55, 21, 424, DateTimeKind.Local).AddTicks(6967),
                            NotificationName = "system",
                            TenantId = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = new Guid("15812862-b2d7-45e2-826e-25545057c334"),
                            CreationTime = new DateTime(2020, 1, 15, 15, 55, 21, 424, DateTimeKind.Local).AddTicks(7887),
                            NotificationName = "system",
                            TenantId = 1,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Data")
                        .HasColumnName("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnName("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnName("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnName("EntityTypeAssemblyName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnName("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnName("NotificationName")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnName("Severity");

                    b.Property<int?>("TenantId")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationsToTenant");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<int>("State")
                        .HasColumnName("State");

                    b.Property<int?>("TenantId")
                        .HasColumnName("TenantId");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnName("TenantNotificationId");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationsToUser");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysAuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_AuditLogs");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysChatRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ChatDetailed")
                        .HasMaxLength(1000);

                    b.Property<int>("ChatState");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<long>("ReceiveUserId");

                    b.Property<int>("SendOrReceive");

                    b.Property<long>("SenderUserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_ChatRecord");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysDict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("DictCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DictContent")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DictType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DictValue")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Sys_Dict");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysDictType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("DictType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DictTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Sys_DictType");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysMenuAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionDisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("ActionName")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool?>("IsActive");

                    b.Property<long>("MenuID");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(100);

                    b.Property<string>("RequiresAuthModel")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("MenuID");

                    b.ToTable("Sys_MenuAction");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActionDisplayName = "新增",
                            ActionName = "btnAdd",
                            IsActive = true,
                            MenuID = 2L,
                            PermissionName = "",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 2L,
                            ActionDisplayName = "保存",
                            ActionName = "btnSave",
                            IsActive = true,
                            MenuID = 2L,
                            PermissionName = "MenusManager.SaveMenus",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 3L,
                            ActionDisplayName = "删除",
                            ActionName = "btnDel",
                            IsActive = true,
                            MenuID = 2L,
                            PermissionName = "MenusManager.DelMenus",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 4L,
                            ActionDisplayName = "新增",
                            ActionName = "btnAdd",
                            IsActive = true,
                            MenuID = 3L,
                            PermissionName = "UserInfoManager.SaveUser",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 5L,
                            ActionDisplayName = "编辑",
                            ActionName = "btnEdit",
                            IsActive = true,
                            MenuID = 3L,
                            PermissionName = "UserInfoManager.SaveUser",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 6L,
                            ActionDisplayName = "删除",
                            ActionName = "btnDel",
                            IsActive = true,
                            MenuID = 3L,
                            PermissionName = "UserInfoManager.DelUser",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 7L,
                            ActionDisplayName = "重置密码",
                            ActionName = "btnResetPass",
                            IsActive = true,
                            MenuID = 3L,
                            PermissionName = "UserInfoManager.ResetPass",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 8L,
                            ActionDisplayName = "新增",
                            ActionName = "btnAdd",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.SaveRole",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 9L,
                            ActionDisplayName = "编辑",
                            ActionName = "BtnEdit",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.SaveRole",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 10L,
                            ActionDisplayName = "删除",
                            ActionName = "btnDel",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.DelRole",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 11L,
                            ActionDisplayName = "模块授权",
                            ActionName = "btnMenu",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.SaveRoleToMenu",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 12L,
                            ActionDisplayName = "用户授权",
                            ActionName = "btnUser",
                            IsActive = true,
                            MenuID = 4L,
                            PermissionName = "RoleManager.SaveRoleToUser",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 13L,
                            ActionDisplayName = "新增",
                            ActionName = "btnAdd",
                            IsActive = true,
                            MenuID = 7L,
                            PermissionName = "",
                            RequiresAuthModel = "2"
                        },
                        new
                        {
                            Id = 14L,
                            ActionDisplayName = "保存",
                            ActionName = "btnSave",
                            IsActive = true,
                            MenuID = 7L,
                            PermissionName = "OrgManager.SaveSysOrg",
                            RequiresAuthModel = "2"
                        },
                        new
                        {
                            Id = 15L,
                            ActionDisplayName = "删除",
                            ActionName = "btnDel",
                            IsActive = true,
                            MenuID = 7L,
                            PermissionName = "OrgManager.DelSysOrg",
                            RequiresAuthModel = "2"
                        },
                        new
                        {
                            Id = 16L,
                            ActionDisplayName = "新增类型",
                            ActionName = "btnAddType",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 17L,
                            ActionDisplayName = "删除类型",
                            ActionName = "btnDelType",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "DictManager.DelDict",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 18L,
                            ActionDisplayName = "保存",
                            ActionName = "btnSave",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "DictManager.SaveDict",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 19L,
                            ActionDisplayName = "新增字典编码",
                            ActionName = "btnAddCode",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "",
                            RequiresAuthModel = "3"
                        },
                        new
                        {
                            Id = 20L,
                            ActionDisplayName = "删除字典编码",
                            ActionName = "btnDelCode",
                            IsActive = true,
                            MenuID = 8L,
                            PermissionName = "DictManager.DeleteDict",
                            RequiresAuthModel = "3"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysMenus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomData")
                        .HasMaxLength(1000);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Icon")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<string>("MenuDisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("MenuName")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderBy");

                    b.Property<long?>("ParentID");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(100);

                    b.Property<string>("RequiresAuthModel")
                        .HasMaxLength(10);

                    b.Property<string>("Url")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sys_Menus");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Icon = "fa-list-ol",
                            IsActive = true,
                            MenuDisplayName = "系统设置",
                            MenuName = "sys-config",
                            OrderBy = 1,
                            PermissionName = "",
                            RequiresAuthModel = "1",
                            Url = ""
                        },
                        new
                        {
                            Id = 2L,
                            Icon = "fa-list-ol",
                            IsActive = true,
                            MenuDisplayName = "菜单管理",
                            MenuName = "sys-menus",
                            OrderBy = 1,
                            ParentID = 1L,
                            PermissionName = "MenusManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysMenus/Index"
                        },
                        new
                        {
                            Id = 3L,
                            Icon = "fa-users",
                            IsActive = true,
                            MenuDisplayName = "用户管理",
                            MenuName = "sys-account",
                            OrderBy = 2,
                            ParentID = 1L,
                            PermissionName = "UserInfoManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysAccount/index"
                        },
                        new
                        {
                            Id = 4L,
                            Icon = "fa-vcard",
                            IsActive = true,
                            MenuDisplayName = "角色管理",
                            MenuName = "sys-roles",
                            OrderBy = 3,
                            ParentID = 1L,
                            PermissionName = "RoleManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysRole/Index"
                        },
                        new
                        {
                            Id = 5L,
                            Icon = "fa-bullhorn",
                            IsActive = true,
                            MenuDisplayName = "消息通知",
                            MenuName = "sys-notifications",
                            OrderBy = 5,
                            ParentID = 1L,
                            PermissionName = "NotificationsManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysNotifications/Index"
                        },
                        new
                        {
                            Id = 6L,
                            Icon = "fa-book",
                            IsActive = true,
                            MenuDisplayName = "日志管理",
                            MenuName = "sys-auditlogs",
                            OrderBy = 7,
                            ParentID = 1L,
                            PermissionName = "LogManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysAuditLogs/Index"
                        },
                        new
                        {
                            Id = 7L,
                            Icon = "fa-university",
                            IsActive = true,
                            MenuDisplayName = "组织机构",
                            MenuName = "sys-org",
                            OrderBy = 6,
                            ParentID = 1L,
                            PermissionName = "OrgManager",
                            RequiresAuthModel = "2",
                            Url = "/Views/SysOrg/Index"
                        },
                        new
                        {
                            Id = 8L,
                            Icon = "fa-bookmark",
                            IsActive = true,
                            MenuDisplayName = "字典管理",
                            MenuName = "sys-dict",
                            OrderBy = 7,
                            ParentID = 1L,
                            PermissionName = "DictManager",
                            RequiresAuthModel = "3",
                            Url = "/Views/SysDict/Index"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("NotificationDescribe")
                        .HasMaxLength(100);

                    b.Property<string>("NotificationDisplayName")
                        .HasMaxLength(100);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(100);

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Sys_NotificationInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0bfb0ddd-bb12-4059-87a1-4e0294643ea4"),
                            CreationTime = new DateTime(2020, 1, 15, 15, 55, 21, 424, DateTimeKind.Local).AddTicks(3913),
                            NotificationDescribe = "提供系统默认提示消息",
                            NotificationDisplayName = "系统通知",
                            NotificationName = "system",
                            NotificationType = "sms"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysOrg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive");

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OrgNode")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("OrgType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<Guid?>("ParentOrgID");

                    b.HasKey("Id");

                    b.ToTable("Sys_Org");
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysRoleToMenuAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMenu");

                    b.Property<long?>("MenuActionID");

                    b.Property<long>("MenuID");

                    b.Property<long>("RoleID");

                    b.HasKey("Id");

                    b.ToTable("Sys_RoleToMenuAction");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsMenu = true,
                            MenuID = 1L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsMenu = true,
                            MenuID = 2L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 3L,
                            IsMenu = true,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 4L,
                            IsMenu = true,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsMenu = true,
                            MenuID = 5L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsMenu = true,
                            MenuID = 6L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 7L,
                            IsMenu = true,
                            MenuID = 7L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 8L,
                            IsMenu = true,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 9L,
                            IsMenu = false,
                            MenuActionID = 1L,
                            MenuID = 2L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 10L,
                            IsMenu = false,
                            MenuActionID = 2L,
                            MenuID = 2L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsMenu = false,
                            MenuActionID = 3L,
                            MenuID = 2L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsMenu = false,
                            MenuActionID = 4L,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 13L,
                            IsMenu = false,
                            MenuActionID = 5L,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 14L,
                            IsMenu = false,
                            MenuActionID = 6L,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 15L,
                            IsMenu = false,
                            MenuActionID = 7L,
                            MenuID = 3L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 16L,
                            IsMenu = false,
                            MenuActionID = 8L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 17L,
                            IsMenu = false,
                            MenuActionID = 9L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 18L,
                            IsMenu = false,
                            MenuActionID = 10L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 19L,
                            IsMenu = false,
                            MenuActionID = 11L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 20L,
                            IsMenu = false,
                            MenuActionID = 12L,
                            MenuID = 4L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 21L,
                            IsMenu = false,
                            MenuActionID = 13L,
                            MenuID = 7L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 22L,
                            IsMenu = false,
                            MenuActionID = 14L,
                            MenuID = 7L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 23L,
                            IsMenu = false,
                            MenuActionID = 15L,
                            MenuID = 7L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 24L,
                            IsMenu = false,
                            MenuActionID = 16L,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 25L,
                            IsMenu = false,
                            MenuActionID = 17L,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 26L,
                            IsMenu = false,
                            MenuActionID = 18L,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 27L,
                            IsMenu = false,
                            MenuActionID = 19L,
                            MenuID = 8L,
                            RoleID = 1L
                        },
                        new
                        {
                            Id = 28L,
                            IsMenu = false,
                            MenuActionID = 20L,
                            MenuID = 8L,
                            RoleID = 1L
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysRoleToUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleID");

                    b.Property<long>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("Sys_RoleToUser");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleID = 1L,
                            UserID = 2L
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool?>("IsActive")
                        .IsRequired();

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Sys_Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2020, 1, 15, 15, 55, 21, 404, DateTimeKind.Local).AddTicks(4031),
                            Description = "动态生成的角色",
                            IsActive = true,
                            RoleName = "admin角色"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Sys_Settings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecf6faa6-27d6-4056-bb32-91357b639824"),
                            CreationTime = new DateTime(2020, 1, 15, 15, 55, 21, 425, DateTimeKind.Local).AddTicks(40),
                            Name = "Abp.Localization.DefaultLanguageName",
                            Value = "zh-Hans"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.UserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnName("CreatorUserId");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnName("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnName("LastModifierUserId");

                    b.Property<string>("OrgCode")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Sex")
                        .HasMaxLength(20);

                    b.Property<long?>("TenantId");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserNameCn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sys_UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2020, 1, 15, 15, 55, 21, 405, DateTimeKind.Local).AddTicks(6849),
                            ImageUrl = "m",
                            IsActive = true,
                            IsAdmin = true,
                            IsDeleted = false,
                            Password = "AQAAAAEAACcQAAAAEEZj3esmovxvE/P0QOhehC+pTI5kwWgw4lpJIUdTy3aJ/vqmujkGkAtLQTV/p2FCBQ==",
                            Sex = "1",
                            UserCode = "sys",
                            UserNameCn = "管理员"
                        },
                        new
                        {
                            Id = 2L,
                            CreationTime = new DateTime(2020, 1, 15, 15, 55, 21, 415, DateTimeKind.Local).AddTicks(6895),
                            ImageUrl = "2",
                            IsActive = true,
                            IsAdmin = true,
                            IsDeleted = false,
                            Password = "AQAAAAEAACcQAAAAEOKiUruIxawStevooYqGq9J0t9qWPy7GY0lKrgZ5Wu2abaHiE/GtCzu/A/MQmcncTA==",
                            Sex = "0",
                            UserCode = "admin",
                            UserNameCn = "管理员"
                        });
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysMenuAction", b =>
                {
                    b.HasOne("NetCoreFrame.Core.SysMenus")
                        .WithMany("SysMenuActions")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetCoreFrame.Core.SysRoleToUser", b =>
                {
                    b.HasOne("NetCoreFrame.Core.SysRoles")
                        .WithMany("SysRoleToUserList")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetCoreFrame.Core.UserInfo")
                        .WithMany("SysRoleToUserList")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
