@{
    ViewData["Title"] = "Home Page";
}

<div>
    <p>
        获取Token:<br />
        <input type="text" id="tokenUrl" value="http://localhost:27749/connect/token" style="width:510px;" />
        <input type="button" id="btn" value="请求ToKey(ClientCredentials)" onclick="doClientCredentialsTokey()" />
        <input type="button" id="btn" value="请求ToKey(OwnerPassword)" onclick="doOwnerPasswordTokey()" />


        <input type="button" id="btn" value="请求ToKey(ACTION)" onclick="doTokeyAction()" />

        <input type="button" id="btn" value="刷新ToKey" onclick="doRefreshTokey()" />
    </p>
    <p>
        Token:<br />
        <textarea id="tokenTxt" style="width:1000px;height:100px;"></textarea>
    </p>
    <p>
        RefreshToken:<br />
        <textarea id="refreshTokenTxt" style="width:1000px;height:50px;"></textarea>
    </p>
    <!-- ****************************************************************************************************************** -->
    <p>
        请求地址:<br />
        <input type="text" id="actionUrl" value="http://localhost:39643/OcelotGatewayB/SetUserInfo/参数" style="width:580px;" />
        <select id="actionType">
            <option value="Post">POST</option>
            <option value="Get">GET</option>
        </select>
        <input type="button" id="btn" value="Js请求" onclick="doJsRequest()" />
        <input type="button" id="btn" value="Action请求" onclick="doAction()" />
        <select id="urlSelect" onchange="urlSelect()">
            <option value="http://localhost:39643/OcelotGatewayB/SetUserInfo/参数">OcelotGatewayB/SetUserInfo/参数</option>
            <option value="http://localhost:39643/OcelotGatewayB/GetUserData">OcelotGatewayB/GetUserData</option>
            <option value="http://localhost:39643/OcelotGatewayB/GetUser"> OcelotGatewayB/GetUser</option>
            <option value="http://localhost:39643/OcelotGatewayA/SetUserInfo/参数">OcelotGatewayA/SetUserInfo/参数</option>
            <option value="http://localhost:39643/OcelotGatewayA/GetUserData">OcelotGatewayA/GetUserData</option>
        </select>

    </p>
    <p>
        参数:<br />
        <textarea id="paramTxt" style="width:1000px;height:20px;"></textarea><br />
        返回结果:<br />
        <textarea id="resultText" style="width:1000px;height:200px;"></textarea>
    </p>
</div>
<script>

    function doJsRequest() {
        //http://localhost:39643/OcelotGatewayB/SetUserInfo/参数
        //http://localhost:39643/OcelotGatewayB/GetUserData
        //http://localhost:39643/OcelotGatewayB/GetUser

        var urlData = $('#actionUrl').val();
        var actionType = $('#actionType').val();
        var token = $('#tokenTxt').val();
        var param = $('#paramTxt').val();

        if (actionType=='get') {
            param = "";
        }

        $.ajax({
            url: urlData,
            type: actionType,
            headers: {
                "Authorization": "Bearer " + token,
            },
            //data: param,
            data: JSON.stringify(param),
            contentType: 'application/json',
            complete: function (e, state) {
                //debugger;
                if (e.status == 200)
                    $('#resultText').val(e.responseText);
                else
                    $('#resultText').val(e.status + "_" + e.statusText);
            }
        });
    }

    function doAction() {
        var data = {
            actionType: $('#actionType').val(),
            url: $('#actionUrl').val(),
            token: $('#tokenTxt').val(),
            paramData: $('#paramTxt').val()
        }

        $.ajax({
            url: "Home/DoApi",
            type: "POST",
            data: JSON.stringify(data),
            contentType: 'application/json',
            complete: function (e, state) {
                //debugger;
                if (e.status == 200)
                    $('#resultText').val(e.responseText);
                else
                    $('#resultText').val(e.status + "_" + e.statusText);
            }
        });//
    }

    //获取token
    function doClientCredentialsTokey() {
        //http://localhost:27749/api/Token/GetClientCredentials

        var requestData = {
            "grant_type": "client_credentials",
            //"scope": "apiA offline_access openid profile"
        };

        var urlData = $('#tokenUrl').val();
 
        $.ajax({
            url: urlData,
            type: "POST",
            data: requestData,
            //contentType: 'application/json',
            dataType: "json",
            headers: {
                //把用户组账号与key进行Base64_Encode编译后进行传输
                "Authorization": "Basic " + base64Encode("client:secret")
            },
            complete: function (e, status) {
                if (e.status == 200) {
                    $('#tokenTxt').val(e.responseJSON.access_token);
                    $('#refreshTokenTxt').val(e.responseJSON.refresh_token);
                } else {
                    $('#tokenTxt').val(e.statusText + e.responseText);
                    $('#refreshTokenTxt').val('');
                }
            }
        });
    }

    //获取token
    function doOwnerPasswordTokey() {
        //http://localhost:27749/connect/token
        //http://localhost:27749/api/Token/GetTokenOwnerPassword

        var urlData = $('#tokenUrl').val();

        var requestData = {
            "grant_type": "password",
            "username": "zjf",
            "password": "zjf",
            "scope": "apiA offline_access"
        };
     
        $.ajax({
            url: urlData,
            type: "POST",
            data: requestData,
            //contentType: 'application/json',
            dataType: "json",
            headers: {
                //把用户组账号与key进行Base64_Encode编译后进行传输
                "Authorization": "Basic " + base64Encode("clientCode:secretPass")
            },
            complete: function (e, status) {
                //debugger;
                if (e.status == 200) {
                    $('#tokenTxt').val(e.responseJSON.access_token);
                    $('#refreshTokenTxt').val(e.responseJSON.refresh_token);
                } else {
                    $('#tokenTxt').val(e.statusText + e.responseText);
                    $('#refreshTokenTxt').val('');
                }
            }
        });
    }

    //刷新token
    function doRefreshTokey() {
        //远程控制器服务地址
        var urlData = "http://localhost:27749/api/Token/GetTokenRefreshToken";
        var requestData =  $('#refreshTokenTxt').val();

        //$.ajax({
        //    url: urlData,
        //    type: "POST",
        //    data: JSON.stringify(requestData),
        //    contentType: 'application/json',
        //   //dataType: "json",
        //    headers: {
        //        //把用户组账号与key进行Base64_Encode编译后进行传输
        //        "Authorization": "Basic " + base64Encode("clientAnd:secretPass")
        //    },
        //    complete: function (e, status) {
        //        if (e.status == 200) {
        //            $('#tokenTxt').val(e.responseJSON.access_token);
        //            $('#refreshTokenTxt').val(e.responseJSON.refresh_token);
        //        } else {
        //            $('#tokenTxt').val(e.statusText + e.responseText);
        //            $('#refreshTokenTxt').val('');
        //        }
        //    }
        //});
        
        //js方式刷新
        //clientRefreshTokens
        urlData = $('#tokenUrl').val();
        $.ajax({
            url: urlData,
            type: "post",
            data: { "grant_type": "refresh_token", refresh_token: requestData },
            dataType: "json",
            headers: {
                "Authorization": "Basic " + base64Encode("clientCode:secretPass")
            },
            complete: function (e, status) {
                //debugger;
                if (e.status == 200) {
                    $('#tokenTxt').val(e.responseJSON.access_token);
                    $('#refreshTokenTxt').val(e.responseJSON.refresh_token);
                } else {
                    $('#tokenTxt').val(e.statusText + e.responseText);
                    $('#refreshTokenTxt').val('');
                }
            }
        });

    }

    //获取token(测试用)
    function doTokeyAction() {
        //http://localhost:27749/connect/token
        //http://localhost:27749/api/Token/
        //http://localhost:27749/api/Token/GetTokenOwnerPassword
        //http://localhost:27749/api/Token/GetClientCredentials

        var urlData = "http://localhost:27749/api/Token/GetClientCredentials";
        var requestData = "grant_type=password&username=zjf&password=zjf";

        $.ajax({
            url: urlData,
            type: "POST",
            //data: requestData,
            //contentType: 'application/json',
            //dataType: "json",
            //headers: {
            //    //把用户组账号与key进行Base64_Encode编译后进行传输
            //    "Authorization": "Basic " + base64Encode("clientRefreshTokens:secretPass")
            //},
            complete: function (e, status) {
                debugger;
                if (e.status == 200) {
                    $('#tokenTxt').val(e.responseJSON.access_token);
                    $('#refreshTokenTxt').val(e.responseJSON.refresh_token);
                } else {
                    $('#tokenTxt').val(e.statusText + e.responseText);
                    $('#refreshTokenTxt').val('');
                }
            }
        });
    }

    function urlSelect() {
        $('#actionUrl').val($('#urlSelect').val());
    }

    function base64Encode(str) {
        //进行编码否则服务端无法获取用户验证信息
        var c1, c2, c3;
        var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var i = 0, len = str.length, string = '';

        while (i < len) {
            c1 = str.charCodeAt(i++) & 0xff;
            if (i === len) {
                string += base64EncodeChars.charAt(c1 >> 2);
                string += base64EncodeChars.charAt((c1 & 0x3) << 4);
                string += "==";
                break;
            }
            c2 = str.charCodeAt(i++);
            if (i === len) {
                string += base64EncodeChars.charAt(c1 >> 2);
                string += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                string += base64EncodeChars.charAt((c2 & 0xF) << 2);
                string += "=";
                break;
            }
            c3 = str.charCodeAt(i++);
            string += base64EncodeChars.charAt(c1 >> 2);
            string += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
            string += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
            string += base64EncodeChars.charAt(c3 & 0x3F);
        }
        return string;
    }

</script>
 
